# This module is specially made for performing database related tasks
# Importing some useful Packages to be used in database related tasks

from Configuration.config import *
from Configuration.sqlQuery import *

# Filtering registraion details to be stored in database
def registration_data_filter(registration_json_data):
    # Getting resgistraion details key values
    json_data = registration_json_data.get('registrationDetails')
    user_email = json_data.get('userEmail')
    first_name = json_data.get('firstName')
    last_name = json_data.get('lastName')
    phone_number = json_data.get('phoneNumber')
    password = json_data.get('password')
    CURRENT_DATE, CURRENT_TIME = date_time()
    # insert values tuple 
    insert_values = (user_email, first_name, last_name, str(phone_number), password, CURRENT_DATE, CURRENT_TIME)
    return insert_values, user_email
    
    
# This function is responsible to store user's registration details  
def insert_registration_details(registration_json_data):
    try:
        # Getting filterd resgistraion details to insert in database
        insert_values, user_email = registration_data_filter(registration_json_data)
        cursor = DB_CONNECTION.cursor()
        # Creating a table if not exist in database
        if not is_table_exist(REGISTRAION_TABLE_NAME): 
            logging.info("Table doesn't exist in database")
            try:
                logging.info(f"Creating a table named {REGISTRAION_TABLE_NAME} in database")
                cursor.execute(registration_create_query())
                logging.info(f"A table named {REGISTRAION_TABLE_NAME} has been created in database")
            except Exception as e:
                    logging.error(f"An error occurred while creating table: {e}")  
        else:
            logging.info("Table already exist in database")
        logging.info("Inserting registration details in database")
        cursor.execute(registration_insert_query(), insert_values)
        DB_CONNECTION.commit()
        cursor.close()
        return True, user_email
    except Exception as error:
        logging.error(f"ERROR OCCURED WHILE DATA INSERTION IN {REGISTRAION_TABLE_NAME} :" f"{error}")
        
               
# This fucntion is responsible to insert OTP details in Database
def insert_otp_details(user_email, OTP):
    cursor = DB_CONNECTION.cursor()
    # Creating a table if not exist in database
    if not is_table_exist(OTP_TABLE_NAME): 
        logging.info("Table doesn't exist in database")
        try:
            logging.info(f"Creating a table named {OTP_TABLE_NAME} in database")
            cursor.execute(otp_verification_create_query())
            logging.info(f"A table named {OTP_TABLE_NAME} has been created in database")
        except Exception as error:
                logging.error(f"An error occurred while creating table: {error}")
                
    logging.info(f"Checking if {user_email} already exist or not in OTP Table")           
    # cursor.execute(is_user_exist(user_email, OTP_TABLE_NAME), (user_email,))
    exists = is_user_exist(user_email, OTP_TABLE_NAME) 
    CURRENT_DATE, CURRENT_TIME = date_time()
    # If user has already generated an OTP before
    if exists:
        logging.info(f"{user_email} already exist in OTP table")
        # If OTP is invalid / expired 
        if is_table_exist(REGISTRAION_TABLE_NAME):
            logging.info(f"'{REGISTRAION_TABLE_NAME}' table already exist in database")
            # If user is not registered then proceeding to send new OTP 
            if not is_user_exist(user_email, REGISTRAION_TABLE_NAME) :
                logging.info(f"{user_email} is not registered")
                cursor.execute(update_otp_query(), (str(OTP), CURRENT_DATE, CURRENT_TIME, user_email)) 
                logging.info(f"OTP for '{user_email}' has been updated")    
                DB_CONNECTION.commit()
                cursor.close()
                return True, f"New OTP sent to your Email" 
            return False, f"User already exist"
        else:
            # If email exist in OTP table but not registered then update OTP table with new OTP
            logging.info("Registration table doesn't exist in database so user is not registered yet.")
            cursor.execute(update_otp_query(), (str(OTP), CURRENT_DATE, CURRENT_TIME, user_email))  
            DB_CONNECTION.commit()
            cursor.close()  
            return True, "New OTP sent to your Email"    
    else:
        # If OTP is not generated by the user nor the user is registered
        insert_values = (user_email, str(OTP), True, CURRENT_DATE, CURRENT_TIME, False)  
        logging.info("Inserting OTP details in database")
        cursor.execute(otp_insert_query(), insert_values)
        DB_CONNECTION.commit()
        cursor.close()
        return True, "OTP sent to your Email"      
    
    
# This function is responsible for storing forgot password OTP in Database
def insert_forgot_otp(user_email, OTP):
    try:
        CURRENT_DATE, CURRENT_TIME = date_time()
        cursor = DB_CONNECTION.cursor()
        try :
            cursor.execute(update_otp_query(), (str(OTP), CURRENT_DATE, CURRENT_TIME, user_email))
        except:
            insert_values = (user_email, str(OTP), True, CURRENT_DATE, CURRENT_TIME)
            cursor.execute(otp_insert_query(), insert_values)
        DB_CONNECTION.commit()
        cursor.close()  
        return True, "OTP sent to your Email"
    except Exception as error:
        logging.error("Error occurred while storing in to database :", error)
        return False, "Error occurred"
    
    
# This function is responsible for assigning eligiblilty to user if they verified OTP
# Also if user changed thier password , this function will assign ineligibilty to user
def password_change_eligibility(user_email, is_eligible):
    cursor = DB_CONNECTION.cursor()
    user_exist = is_user_exist(user_email, OTP_TABLE_NAME)
    CURRENT_DATE, CURRENT_TIME = date_time()
    if user_exist:
        cursor.execute(can_change_allow_query(), (CURRENT_DATE, CURRENT_TIME, is_eligible, user_email))  
        DB_CONNECTION.commit()
        cursor.close()
        return True
    return False


# This function is responsible for update user password if they are eligible 
def update_password(user_email:str, new_password:str):
    cursor = DB_CONNECTION.cursor()
    user_exist = is_user_exist(user_email, REGISTRAION_TABLE_NAME)
    CURRENT_DATE, CURRENT_TIME = date_time()
    if user_exist:
        cursor.execute(update_password_query(), (new_password, CURRENT_DATE, CURRENT_TIME, user_email))  
        DB_CONNECTION.commit()
        cursor.close()       
        return True, "Password changed successfully"
    return False, "Can't change password"   


# This function is responsible to Insert Booking details in Database
def insert_booking_details(json_data):
    try:
        # Filtering User's and Booking details 
        user_email = json_data.get("userEmail")
        pickup_location = json_data.get("pickUpLocation")
        drop_location = json_data.get("dropLocation")
        
        cursor = DB_CONNECTION.cursor() # Building cursor for Database
        # Creating a booking table if it doesn't exists
        if not is_table_exist(BOOKING_TABLE_NAME):
            cursor.execute(booking_create_query())
            logging.info("Booking table has been created")
        # Checking if the user exist or not 
        exist = is_user_exist(user_email, REGISTRAION_TABLE_NAME)
        if exist:
            CURRENT_DATE, CURRENT_TIME = date_time()
            cursor.execute(booking_insert_query(), (user_email, pickup_location, drop_location, CURRENT_DATE, CURRENT_TIME))
            logging.info(f"User : {user_email}")
            logging.info("Booking data has been inserted in database")
            DB_CONNECTION.commit()
            cursor.close()
            return True
        return False
    except Exception as error:
        logging.error("Error occurred while creating table in database :", error)
        return False